[
  {
    "namespace": "manifest",
    "types": [
      {
        "$extend": "OptionalPermissionNoPrompt",
        "choices": [
          {
            "type": "string",
            "enum": [
              "scripting"
            ]
          }
        ]
      }
    ]
  },
  {
    "namespace": "scripting",
    "description": "Use the scripting API to execute script in different contexts.",
    "permissions": [
      "scripting"
    ],
    "types": [
      {
        "id": "ScriptInjection",
        "description": "Details of a script injection",
        "type": "object",
        "properties": {
          "args": {
            "description": "The arguments to curry into a provided function. This is only valid if the \u003Ccode\u003Efunc\u003C/code\u003E parameter is specified. These arguments must be JSON-serializable.",
            "optional": true,
            "type": "array",
            "items": {
              "type": "any"
            }
          },
          "files": {
            "description": "The path of the JS files to inject, relative to the extension\u0027s root directory. Exactly one of \u003Ccode\u003Efiles\u003C/code\u003E and \u003Ccode\u003Efunc\u003C/code\u003E must be specified.",
            "optional": true,
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "func": {
            "description": "A JavaScript function to inject. This function will be serialized, and then deserialized for injection. This means that any bound parameters and execution context will be lost. Exactly one of \u003Ccode\u003Efiles\u003C/code\u003E and \u003Ccode\u003Efunc\u003C/code\u003E must be specified.",
            "optional": true,
            "type": "function"
          },
          "target": {
            "description": "Details specifying the target into which to inject the script.",
            "$ref": "InjectionTarget"
          },
          "world": {
            "optional": true,
            "$ref": "ExecutionWorld"
          },
          "injectImmediately": {
            "description": "Whether the injection should be triggered in the target as soon as possible (but not necessarily prior to page load).",
            "optional": true,
            "type": "boolean"
          }
        }
      },
      {
        "id": "InjectionResult",
        "description": "Result of a script injection.",
        "type": "object",
        "properties": {
          "frameId": {
            "description": "The frame ID associated with the injection.",
            "type": "integer"
          },
          "result": {
            "description": "The result of the script execution.",
            "optional": true,
            "type": "any"
          },
          "error": {
            "description": "The error property is set when the script execution failed. The value is typically an (Error) object with a message property, but could be any value (including primitives and undefined) if the script threw or rejected with such a value.",
            "optional": true,
            "type": "any"
          }
        }
      },
      {
        "id": "InjectionTarget",
        "type": "object",
        "properties": {
          "frameIds": {
            "description": "The IDs of specific frames to inject into.",
            "optional": true,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "allFrames": {
            "description": "Whether the script should inject into all frames within the tab. Defaults to false. This must not be true if \u003Ccode\u003EframeIds\u003C/code\u003E is specified.",
            "optional": true,
            "type": "boolean"
          },
          "tabId": {
            "description": "The ID of the tab into which to inject.",
            "type": "number"
          }
        }
      },
      {
        "id": "CSSInjection",
        "type": "object",
        "properties": {
          "css": {
            "description": "A string containing the CSS to inject. Exactly one of \u003Ccode\u003Efiles\u003C/code\u003E and \u003Ccode\u003Ecss\u003C/code\u003E must be specified.",
            "optional": true,
            "type": "string"
          },
          "files": {
            "description": "The path of the CSS files to inject, relative to the extension\u0027s root directory. Exactly one of \u003Ccode\u003Efiles\u003C/code\u003E and \u003Ccode\u003Ecss\u003C/code\u003E must be specified.",
            "optional": true,
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "description": "The style origin for the injection. Defaults to \u003Ccode\u003E\u0027AUTHOR\u0027\u003C/code\u003E.",
            "optional": true,
            "type": "string",
            "enum": [
              "USER",
              "AUTHOR"
            ]
          },
          "target": {
            "description": "Details specifying the target into which to inject the CSS.",
            "$ref": "InjectionTarget"
          }
        }
      },
      {
        "id": "ContentScriptFilter",
        "type": "object",
        "properties": {
          "ids": {
            "description": "The IDs of specific scripts to retrieve with \u003Ccode\u003EgetRegisteredContentScripts()\u003C/code\u003E or to unregister with \u003Ccode\u003EunregisterContentScripts()\u003C/code\u003E.",
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "id": "ExecutionWorld",
        "description": "The JavaScript world for a script to execute within. \u003Ccode\u003EISOLATED\u003C/code\u003E is the default execution environment of content scripts, \u003Ccode\u003EMAIN\u003C/code\u003E is the web page\u0027s execution environment.",
        "type": "string",
        "enum": [
          "ISOLATED",
          "MAIN"
        ]
      },
      {
        "id": "RegisteredContentScript",
        "type": "object",
        "properties": {
          "allFrames": {
            "description": "If specified true, it will inject into all frames, even if the frame is not the top-most frame in the tab. Each frame is checked independently for URL requirements; it will not inject into child frames if the URL requirements are not met. Defaults to false, meaning that only the top frame is matched.",
            "optional": true,
            "type": "boolean"
          },
          "excludeMatches": {
            "description": "Excludes pages that this content script would otherwise be injected into.",
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "description": "The id of the content script, specified in the API call.",
            "type": "string"
          },
          "js": {
            "description": "The list of JavaScript files to be injected into matching pages. These are injected in the order they appear in this array.",
            "optional": true,
            "type": "array",
            "items": {
              "$ref": "manifest.ExtensionURL"
            }
          },
          "matches": {
            "description": "Specifies which pages this content script will be injected into. Must be specified for \u003Ccode\u003EregisterContentScripts()\u003C/code\u003E.",
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchOriginAsFallback": {
            "description": "If matchOriginAsFallback is true, then the code is also injected in about:, data:, blob: when their origin matches the pattern in \u0027matches\u0027, even if the actual document origin is opaque (due to the use of CSP sandbox or iframe sandbox). Match patterns in \u0027matches\u0027 must specify a wildcard path glob. By default it is \u003Ccode\u003Efalse\u003C/code\u003E.",
            "optional": true,
            "type": "boolean"
          },
          "runAt": {
            "description": "Specifies when JavaScript files are injected into the web page. The preferred and default value is \u003Ccode\u003Edocument_idle\u003C/code\u003E.",
            "optional": true,
            "$ref": "extensionTypes.RunAt"
          },
          "world": {
            "description": "The JavaScript world for a script to execute within. Defaults to \u0022ISOLATED\u0022.",
            "optional": true,
            "$ref": "ExecutionWorld"
          },
          "persistAcrossSessions": {
            "description": "Specifies if this content script will persist into future sessions. Defaults to true.",
            "optional": true,
            "type": "boolean"
          },
          "css": {
            "description": "The list of CSS files to be injected into matching pages. These are injected in the order they appear in this array.",
            "optional": true,
            "type": "array",
            "items": {
              "$ref": "manifest.ExtensionURL"
            }
          }
        }
      }
    ],
    "functions": [
      {
        "name": "executeScript",
        "description": "Injects a script into a target context. The script will be run at \u003Ccode\u003Edocument_idle\u003C/code\u003E.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "injection",
            "description": "The details of the script which to inject.",
            "$ref": "ScriptInjection"
          },
          {
            "name": "callback",
            "description": "Invoked upon completion of the injection. The resulting array contains the result of execution for each frame where the injection succeeded.",
            "type": "function",
            "parameters": [
              {
                "name": "results",
                "type": "array",
                "items": {
                  "$ref": "InjectionResult"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "insertCSS",
        "description": "Inserts a CSS stylesheet into a target context. If multiple frames are specified, unsuccessful injections are ignored.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "injection",
            "description": "The details of the styles to insert.",
            "$ref": "CSSInjection"
          },
          {
            "name": "callback",
            "description": "Invoked upon completion of the injection.",
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "removeCSS",
        "description": "Removes a CSS stylesheet that was previously inserted by this extension from a target context.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "injection",
            "description": "The details of the styles to remove. Note that the \u003Ccode\u003Ecss\u003C/code\u003E, \u003Ccode\u003Efiles\u003C/code\u003E, and \u003Ccode\u003Eorigin\u003C/code\u003E properties must exactly match the stylesheet inserted through \u003Ccode\u003EinsertCSS\u003C/code\u003E. Attempting to remove a non-existent stylesheet is a no-op.",
            "$ref": "CSSInjection"
          },
          {
            "name": "callback",
            "description": "Invoked upon completion of the injection.",
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "registerContentScripts",
        "description": "Registers one or more content scripts for this extension.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "scripts",
            "description": "Contains a list of scripts to be registered. If there are errors during script parsing/file validation, or if the IDs specified already exist, then no scripts are registered.",
            "type": "array",
            "items": {
              "$ref": "RegisteredContentScript"
            }
          },
          {
            "name": "callback",
            "description": "Invoked upon completion of the registration.",
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "getRegisteredContentScripts",
        "description": "Returns all dynamically registered content scripts for this extension that match the given filter.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "filter",
            "description": "An object to filter the extension\u0027s dynamically registered scripts.",
            "optional": true,
            "$ref": "ContentScriptFilter"
          },
          {
            "name": "callback",
            "description": "The resulting array contains the registered content scripts.",
            "type": "function",
            "parameters": [
              {
                "name": "scripts",
                "type": "array",
                "items": {
                  "$ref": "RegisteredContentScript"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "unregisterContentScripts",
        "description": "Unregisters one or more content scripts for this extension.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "filter",
            "description": "If specified, only unregisters dynamic content scripts which match the filter. Otherwise, all of the extension\u0027s dynamic content scripts are unregistered.",
            "optional": true,
            "$ref": "ContentScriptFilter"
          },
          {
            "name": "callback",
            "description": "Invoked upon completion of the unregistration.",
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "updateContentScripts",
        "description": "Updates one or more content scripts for this extension.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "scripts",
            "description": "Contains a list of scripts to be updated. If there are errors during script parsing/file validation, or if the IDs specified do not already exist, then no scripts are updated.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "persistAcrossSessions": {
                  "description": "Specifies if this content script will persist into future sessions.",
                  "optional": true,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "callback",
            "description": "Invoked when scripts have been updated.",
            "type": "function",
            "parameters": []
          }
        ]
      }
    ]
  }
]