[
  {
    "namespace": "runtime",
    "description": "Use the \u003Ccode\u003Ebrowser.runtime\u003C/code\u003E API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.",
    "types": [
      {
        "id": "ContextFilter",
        "description": "A filter to match against existing extension context. Matching contexts must match all specified filters.",
        "type": "object",
        "properties": {
          "contextIds": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contextTypes": {
            "optional": true,
            "type": "array",
            "items": {
              "$ref": "ContextType"
            }
          },
          "documentIds": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentOrigins": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentUrls": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "frameIds": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "tabIds": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "windowIds": {
            "optional": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "incognito": {
            "optional": true,
            "type": "boolean"
          }
        }
      },
      {
        "id": "ContextType",
        "description": "The type of extension view.",
        "type": "string",
        "enum": [
          "BACKGROUND",
          "POPUP",
          "SIDE_PANEL",
          "TAB"
        ]
      },
      {
        "id": "ExtensionContext",
        "description": "A context hosting extension content",
        "type": "object",
        "properties": {
          "contextId": {
            "description": "An unique identifier associated to this context",
            "type": "string"
          },
          "contextType": {
            "description": "The type of the context",
            "$ref": "ContextType"
          },
          "documentId": {
            "description": "An UUID for the document associated with this context, or undefined if it is not hosted in a document",
            "optional": true,
            "type": "string",
            "unsupported": true
          },
          "documentOrigin": {
            "description": "The origin of the document associated with this context, or undefined if it is not hosted in a document",
            "optional": true,
            "type": "string"
          },
          "documentUrl": {
            "description": "The URL of the document associated with this context, or undefined if it is not hosted in a document",
            "optional": true,
            "type": "string"
          },
          "incognito": {
            "description": "Whether the context is associated with an private browsing context.",
            "type": "boolean"
          },
          "frameId": {
            "description": "The frame ID for this context, or -1 if it is not hosted in a frame.",
            "type": "integer"
          },
          "tabId": {
            "description": "The tab ID for this context, or -1 if it is not hosted in a tab.",
            "type": "integer"
          },
          "windowId": {
            "description": "The window ID for this context, or -1 if it is not hosted in a window.",
            "type": "integer"
          }
        }
      },
      {
        "id": "Port",
        "description": "An object which allows two way communication with other pages.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "disconnect": {
            "type": "function"
          },
          "onDisconnect": {
            "$ref": "events.Event"
          },
          "onMessage": {
            "$ref": "events.Event"
          },
          "postMessage": {
            "type": "function"
          },
          "sender": {
            "description": "This property will \u003Cb\u003Eonly\u003C/b\u003E be present on ports passed to onConnect/onConnectExternal listeners.",
            "optional": true,
            "$ref": "MessageSender"
          }
        }
      },
      {
        "id": "MessageSender",
        "description": "An object containing information about the script context that sent a message or request.",
        "type": "object",
        "properties": {
          "tab": {
            "description": "The $(ref:tabs.Tab) which opened the connection, if any. This property will \u003Cstrong\u003Eonly\u003C/strong\u003E be present when the connection was opened from a tab (including content scripts), and \u003Cstrong\u003Eonly\u003C/strong\u003E if the receiver is an extension, not an app.",
            "optional": true,
            "$ref": "tabs.Tab"
          },
          "frameId": {
            "description": "The $(topic:frame_ids)[frame] that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when \u003Ccode\u003Etab\u003C/code\u003E is set.",
            "optional": true,
            "type": "integer"
          },
          "id": {
            "description": "The ID of the extension or app that opened the connection, if any.",
            "optional": true,
            "type": "string"
          },
          "url": {
            "description": "The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe\u0027s URL not the URL of the page which hosts it.",
            "optional": true,
            "type": "string"
          },
          "tlsChannelId": {
            "description": "The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available.",
            "optional": true,
            "type": "string",
            "unsupported": true
          },
          "userScriptWorldId": {
            "description": "The worldId of the USER_SCRIPT world that sent the message. Only present on onUserScriptMessage and onUserScriptConnect (in port.sender) events.",
            "optional": true,
            "type": "string"
          }
        }
      },
      {
        "id": "PlatformOs",
        "description": "The operating system the browser is running on.",
        "type": "string",
        "enum": [
          "mac",
          "win",
          "android",
          "cros",
          "linux",
          "openbsd"
        ]
      },
      {
        "id": "PlatformArch",
        "description": "The machine\u0027s processor architecture.",
        "type": "string",
        "enum": [
          "aarch64",
          "arm",
          "ppc64",
          "s390x",
          "sparc64",
          "x86-32",
          "x86-64",
          "noarch"
        ]
      },
      {
        "id": "PlatformInfo",
        "description": "An object containing information about the current platform.",
        "type": "object",
        "properties": {
          "os": {
            "description": "The operating system the browser is running on.",
            "$ref": "PlatformOs"
          },
          "arch": {
            "description": "The machine\u0027s processor architecture.",
            "$ref": "PlatformArch"
          },
          "nacl_arch": {
            "description": "The native client architecture. This may be different from arch on some platforms.",
            "$ref": "PlatformNaclArch",
            "unsupported": true
          }
        }
      },
      {
        "id": "BrowserInfo",
        "description": "An object containing information about the current browser.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the browser, for example \u0027Firefox\u0027.",
            "type": "string"
          },
          "vendor": {
            "description": "The name of the browser vendor, for example \u0027Mozilla\u0027.",
            "type": "string"
          },
          "version": {
            "description": "The browser\u0027s version, for example \u002742.0.0\u0027 or \u00270.8.1pre\u0027.",
            "type": "string"
          },
          "buildID": {
            "description": "The browser\u0027s build ID/date, for example \u002720160101\u0027.",
            "type": "string"
          }
        }
      },
      {
        "id": "RequestUpdateCheckStatus",
        "description": "Result of the update check.",
        "type": "string",
        "enum": [
          "throttled",
          "no_update",
          "update_available"
        ]
      },
      {
        "id": "OnInstalledReason",
        "description": "The reason that this event is being dispatched.",
        "type": "string",
        "enum": [
          "install",
          "update",
          "browser_update"
        ]
      },
      {
        "id": "OnRestartRequiredReason",
        "description": "The reason that the event is being dispatched. \u0027app_update\u0027 is used when the restart is needed because the application is updated to a newer version. \u0027os_update\u0027 is used when the restart is needed because the browser/OS is updated to a newer version. \u0027periodic\u0027 is used when the system runs for more than the permitted uptime set in the enterprise policy.",
        "type": "string",
        "enum": [
          "app_update",
          "os_update",
          "periodic"
        ]
      },
      {
        "id": "OnPerformanceWarningCategory",
        "description": "The performance warning event category, e.g. \u0027content_script\u0027.",
        "type": "string",
        "enum": [
          "content_script"
        ]
      },
      {
        "id": "OnPerformanceWarningSeverity",
        "description": "The performance warning event severity. Will be \u0027high\u0027 for serious and user-visible issues.",
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high"
        ]
      }
    ],
    "properties": {
      "lastError": {
        "description": "This will be defined during an API method callback if there was an error",
        "optional": true,
        "type": "object",
        "properties": {
          "message": {
            "description": "Details about the error which occurred.",
            "optional": true,
            "type": "string"
          }
        }
      },
      "id": {
        "description": "The ID of the extension/app.",
        "type": "string"
      }
    },
    "functions": [
      {
        "name": "getBackgroundPage",
        "description": "Retrieves the JavaScript \u0027window\u0027 object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "name": "backgroundPage",
                "description": "The JavaScript \u0027window\u0027 object for the background page.",
                "optional": true,
                "type": "object"
              }
            ]
          }
        ]
      },
      {
        "name": "getContexts",
        "description": "Fetches information about active contexts associated with this extension",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "filter",
            "description": "A filter to find matching context.",
            "$ref": "ContextFilter"
          },
          {
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "name": "contexts",
                "description": "The matching contexts, if any.",
                "type": "array",
                "items": {
                  "$ref": "ExtensionContext"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "openOptionsPage",
        "description": "\u003Cp\u003EOpen your Extension\u0027s options page, if possible.\u003C/p\u003E\u003Cp\u003EThe precise behavior may depend on your manifest\u0027s \u003Ccode\u003E$(topic:optionsV2)[options_ui]\u003C/code\u003E or \u003Ccode\u003E$(topic:options)[options_page]\u003C/code\u003E key, or what the browser happens to support at the time.\u003C/p\u003E\u003Cp\u003EIf your Extension does not declare an options page, or the browser failed to create one for some other reason, the callback will set $(ref:lastError).\u003C/p\u003E",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "callback",
            "optional": true,
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "getManifest",
        "description": "Returns details about the app or extension from the manifest. The object returned is a serialization of the full $(topic:manifest)[manifest file].",
        "type": "function",
        "parameters": [],
        "returns": {
          "description": "The manifest details.",
          "type": "object",
          "properties": {}
        }
      },
      {
        "name": "getURL",
        "description": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
        "type": "function",
        "parameters": [
          {
            "name": "path",
            "description": "A path to a resource within an app/extension expressed relative to its install directory.",
            "type": "string"
          }
        ],
        "returns": {
          "description": "The fully-qualified URL to the resource.",
          "type": "string"
        }
      },
      {
        "name": "getFrameId",
        "description": "Get the frameId of any window global or frame element.",
        "type": "function",
        "parameters": [
          {
            "name": "target",
            "description": "A WindowProxy or a Browsing Context container element (IFrame, Frame, Embed, Object) for the target frame.",
            "type": "any"
          }
        ],
        "returns": {
          "description": "The frameId of the target frame, or -1 if it doesn\u0027t exist.",
          "type": "number"
        }
      },
      {
        "name": "setUninstallURL",
        "description": "Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 1023 characters.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "url",
            "description": "URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation.",
            "optional": true,
            "type": "string"
          },
          {
            "name": "callback",
            "description": "Called when the uninstall URL is set. If the given URL is invalid, $(ref:runtime.lastError) will be set.",
            "optional": true,
            "type": "function",
            "parameters": []
          }
        ]
      },
      {
        "name": "reload",
        "description": "Reloads the app or extension.",
        "type": "function",
        "parameters": []
      },
      {
        "name": "requestUpdateCheck",
        "description": "Requests an update check for this app/extension.",
        "async": "callback",
        "type": "function",
        "unsupported": true,
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "name": "status",
                "description": "Result of the update check.",
                "$ref": "RequestUpdateCheckStatus"
              },
              {
                "name": "details",
                "description": "If an update is available, this contains more information about the available update.",
                "optional": true,
                "type": "object",
                "properties": {
                  "version": {
                    "description": "The version of the available update.",
                    "type": "string"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "name": "restart",
        "description": "Restart the device when the app runs in kiosk mode. Otherwise, it\u0027s no-op.",
        "type": "function",
        "unsupported": true,
        "parameters": []
      },
      {
        "name": "connect",
        "description": "Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and $(topic:manifest/externally_connectable)[web messaging]. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via $(ref:tabs.connect).",
        "type": "function",
        "parameters": [
          {
            "name": "extensionId",
            "description": "The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging].",
            "optional": true,
            "type": "string"
          },
          {
            "name": "connectInfo",
            "optional": true,
            "type": "object",
            "properties": {
              "name": {
                "description": "Will be passed into onConnect for processes that are listening for the connection event.",
                "optional": true,
                "type": "string"
              },
              "includeTlsChannelId": {
                "description": "Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event.",
                "optional": true,
                "type": "boolean"
              }
            }
          }
        ],
        "returns": {
          "description": "Port through which messages can be sent and received. The port\u0027s $(ref:runtime.Port onDisconnect) event is fired if the extension/app does not exist. ",
          "$ref": "Port"
        }
      },
      {
        "name": "connectNative",
        "description": "Connects to a native application in the host machine.",
        "type": "function",
        "parameters": [
          {
            "name": "application",
            "description": "The name of the registered application to connect to.",
            "type": "string",
            "pattern": "^\\w\u002B(\\.\\w\u002B)*$"
          }
        ],
        "returns": {
          "description": "Port through which messages can be sent and received with the application",
          "$ref": "Port"
        }
      },
      {
        "name": "sendMessage",
        "description": "Sends a single message to event listeners within your extension/app or a different extension/app. Similar to $(ref:runtime.connect) but only sends a single message, with an optional response. If sending to your extension, the $(ref:runtime.onMessage) event will be fired in each page, or $(ref:runtime.onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use $(ref:tabs.sendMessage).",
        "async": "responseCallback",
        "type": "function",
        "parameters": [
          {
            "name": "extensionId",
            "description": "The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging].",
            "optional": true,
            "type": "string"
          },
          {
            "name": "message",
            "type": "any"
          },
          {
            "name": "options",
            "optional": true,
            "type": "object",
            "properties": {
              "includeTlsChannelId": {
                "description": "Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event.",
                "optional": true,
                "type": "boolean",
                "unsupported": true
              }
            }
          },
          {
            "name": "responseCallback",
            "optional": true,
            "type": "function",
            "parameters": [
              {
                "name": "response",
                "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message.",
                "type": "any"
              }
            ]
          }
        ]
      },
      {
        "name": "sendNativeMessage",
        "description": "Send a single message to a native application.",
        "async": "responseCallback",
        "type": "function",
        "parameters": [
          {
            "name": "application",
            "description": "The name of the native messaging host.",
            "type": "string",
            "pattern": "^\\w\u002B(\\.\\w\u002B)*$"
          },
          {
            "name": "message",
            "description": "The message that will be passed to the native messaging host.",
            "type": "any"
          },
          {
            "name": "responseCallback",
            "optional": true,
            "type": "function",
            "parameters": [
              {
                "name": "response",
                "description": "The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message.",
                "type": "any"
              }
            ]
          }
        ]
      },
      {
        "name": "getBrowserInfo",
        "description": "Returns information about the current browser.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "callback",
            "description": "Called with results",
            "type": "function",
            "parameters": [
              {
                "name": "browserInfo",
                "$ref": "BrowserInfo"
              }
            ]
          }
        ]
      },
      {
        "name": "getPlatformInfo",
        "description": "Returns information about the current platform.",
        "async": "callback",
        "type": "function",
        "parameters": [
          {
            "name": "callback",
            "description": "Called with results",
            "type": "function",
            "parameters": [
              {
                "name": "platformInfo",
                "$ref": "PlatformInfo"
              }
            ]
          }
        ]
      },
      {
        "name": "getPackageDirectoryEntry",
        "description": "Returns a DirectoryEntry for the package directory.",
        "async": "callback",
        "type": "function",
        "unsupported": true,
        "parameters": [
          {
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "name": "directoryEntry",
                "type": "object"
              }
            ]
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onStartup",
        "description": "Fired when a profile that has this extension installed first starts up. This event is not fired for incognito profiles.",
        "type": "function"
      },
      {
        "name": "onInstalled",
        "description": "Fired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.",
        "type": "function",
        "parameters": [
          {
            "name": "details",
            "type": "object",
            "properties": {
              "reason": {
                "description": "The reason that this event is being dispatched.",
                "$ref": "OnInstalledReason"
              },
              "previousVersion": {
                "description": "Indicates the previous version of the extension, which has just been updated. This is present only if \u0027reason\u0027 is \u0027update\u0027.",
                "optional": true,
                "type": "string"
              },
              "temporary": {
                "description": "Indicates whether the addon is installed as a temporary extension.",
                "type": "boolean"
              },
              "id": {
                "description": "Indicates the ID of the imported shared module extension which updated. This is present only if \u0027reason\u0027 is \u0027shared_module_update\u0027.",
                "optional": true,
                "type": "string",
                "unsupported": true
              }
            }
          }
        ]
      },
      {
        "name": "onSuspend",
        "description": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won\u0027t be unloaded. ",
        "type": "function"
      },
      {
        "name": "onSuspendCanceled",
        "description": "Sent after onSuspend to indicate that the app won\u0027t be unloaded after all.",
        "type": "function"
      },
      {
        "name": "onUpdateAvailable",
        "description": "Fired when an update is available, but isn\u0027t installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call $(ref:runtime.reload). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call $(ref:runtime.reload) manually in response to this event the update will not get installed until the next time the browser itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if $(ref:runtime.reload) is called in response to this event.",
        "type": "function",
        "parameters": [
          {
            "name": "details",
            "description": "The manifest details of the available update.",
            "type": "object",
            "properties": {
              "version": {
                "description": "The version number of the available update.",
                "type": "string"
              }
            }
          }
        ]
      },
      {
        "name": "onBrowserUpdateAvailable",
        "description": "Fired when an update for the browser is available, but isn\u0027t installed immediately because a browser restart is required.",
        "type": "function",
        "unsupported": true,
        "deprecated": "Please use $(ref:runtime.onRestartRequired).",
        "parameters": []
      },
      {
        "name": "onConnect",
        "description": "Fired when a connection is made from either an extension process or a content script.",
        "type": "function",
        "parameters": [
          {
            "name": "port",
            "$ref": "Port"
          }
        ]
      },
      {
        "name": "onUserScriptConnect",
        "description": "Fired when a connection is made from a USER_SCRIPT world registered through the userScripts API.",
        "type": "function",
        "parameters": [
          {
            "name": "port",
            "$ref": "Port"
          }
        ]
      },
      {
        "name": "onConnectExternal",
        "description": "Fired when a connection is made from another extension.",
        "type": "function",
        "parameters": [
          {
            "name": "port",
            "$ref": "Port"
          }
        ]
      },
      {
        "name": "onMessage",
        "description": "Fired when a message is sent from either an extension process or a content script.",
        "type": "function",
        "parameters": [
          {
            "name": "message",
            "description": "The message sent by the calling script.",
            "optional": true,
            "type": "any"
          },
          {
            "name": "sender",
            "$ref": "MessageSender"
          },
          {
            "name": "sendResponse",
            "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one \u003Ccode\u003EonMessage\u003C/code\u003E listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until \u003Ccode\u003EsendResponse\u003C/code\u003E is called).",
            "type": "function"
          }
        ],
        "returns": {
          "description": "Return true from the event listener if you wish to call \u003Ccode\u003EsendResponse\u003C/code\u003E after the event listener returns.",
          "type": "boolean"
        }
      },
      {
        "name": "onMessageExternal",
        "description": "Fired when a message is sent from another extension/app. Cannot be used in a content script.",
        "type": "function",
        "parameters": [
          {
            "name": "message",
            "description": "The message sent by the calling script.",
            "optional": true,
            "type": "any"
          },
          {
            "name": "sender",
            "$ref": "MessageSender"
          },
          {
            "name": "sendResponse",
            "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one \u003Ccode\u003EonMessage\u003C/code\u003E listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until \u003Ccode\u003EsendResponse\u003C/code\u003E is called).",
            "type": "function"
          }
        ],
        "returns": {
          "description": "Return true from the event listener if you wish to call \u003Ccode\u003EsendResponse\u003C/code\u003E after the event listener returns.",
          "type": "boolean"
        }
      },
      {
        "name": "onUserScriptMessage",
        "description": "Fired when a message is sent from a USER_SCRIPT world registered through the userScripts API.",
        "type": "function",
        "parameters": [
          {
            "name": "message",
            "description": "The message sent by the calling script.",
            "optional": true,
            "type": "any"
          },
          {
            "name": "sender",
            "$ref": "MessageSender"
          },
          {
            "name": "sendResponse",
            "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one \u003Ccode\u003EonMessage\u003C/code\u003E listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until \u003Ccode\u003EsendResponse\u003C/code\u003E is called).",
            "type": "function"
          }
        ],
        "returns": {
          "description": "Return true from the event listener if you wish to call \u003Ccode\u003EsendResponse\u003C/code\u003E after the event listener returns.",
          "type": "boolean"
        }
      },
      {
        "name": "onRestartRequired",
        "description": "Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.",
        "type": "function",
        "unsupported": true,
        "parameters": [
          {
            "name": "reason",
            "description": "The reason that the event is being dispatched.",
            "$ref": "OnRestartRequiredReason"
          }
        ]
      },
      {
        "name": "onPerformanceWarning",
        "description": "Fired when a runtime performance issue is detected with the extension. Observe this event to be proactively notified of runtime performance problems with the extension.",
        "type": "function",
        "parameters": [
          {
            "name": "details",
            "type": "object",
            "properties": {
              "category": {
                "description": "The performance warning event category, e.g. \u0027content_script\u0027.",
                "$ref": "OnPerformanceWarningCategory"
              },
              "severity": {
                "description": "The performance warning event severity, e.g. \u0027high\u0027.",
                "$ref": "OnPerformanceWarningSeverity"
              },
              "tabId": {
                "description": "The $(ref:tabs.Tab) that the performance warning relates to, if any.",
                "optional": true,
                "type": "integer"
              },
              "description": {
                "description": "An explanation of what the warning means, and hopefully how to address it.",
                "type": "string"
              }
            }
          }
        ]
      }
    ]
  }
]